{"version":3,"sources":["components/AddBewTaskFiled/AddNewTaskField.js","components/TasksItem/TasksItem.js","components/TasksList/TasksList.js","components/Footer/Footer.js","App.js","index.js"],"names":["AddNewTaskField","state","value","handleChange","event","setState","target","sendNewTask","trim","key","length","newTask","completed","id","v4","props","updateInitialTasks","className","placeholder","this","onChange","onKeyUp","React","Component","TasksItem","newValueTask","task","editIntVisible","textInput","createRef","toggleCompleted","updateTasksCondition","toggleEditInput","preventDefault","prevState","current","focus","sendNewTaskValue","updateConditionCheckedTask","handleBlur","editTaskValue","changeConditionEscapeKey","deleteTask","delete","cx","classNames","onDoubleClick","type","checked","htmlFor","onClick","action","onSubmit","onBlur","ref","TasksList","initialTasksList","showCurrentTasks","showNow","filter","map","Footer","changeShowFlag","updateShowCurrentTaskFlag","name","clearCompleted","leftItems","href","defaultProps","App","newTasksItem","newTaskCondiniton","taskObj","newFlag","toggleCompletedAll","clearTasksList","deletedTask","JSON","parse","localStorage","getItem","prevProps","snapshot","setItem","stringify","defaultChecked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6cdceff.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 } from 'uuid';\n\nexport class AddNewTaskField extends React.Component {\n  state = {\n    value: '',\n  };\n\n  handleChange = (event) => {\n    this.setState({\n      value: event.target.value,\n    });\n  };\n\n  sendNewTask = (event) => {\n    const { value } = this.state;\n\n    if (!value.trim()) {\n      return false;\n    }\n\n    if (event.key === 'Enter' && value.length) {\n      const newTask = {\n        value,\n        completed: false,\n        id: v4(),\n      };\n\n      this.props.updateInitialTasks(newTask);\n      this.setState({\n        value: '',\n      });\n    }\n\n    return true;\n  };\n\n  render() {\n    return (\n      <input\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={this.state.value}\n        onChange={this.handleChange}\n        onKeyUp={this.sendNewTask}\n      />\n    );\n  }\n}\n\nAddNewTaskField.propTypes = {\n  updateInitialTasks: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\n\nexport class TasksItem extends React.Component {\n  state = {\n    newValueTask: this.props.task.value,\n    editIntVisible: false,\n  };\n\n  textInput = React.createRef();\n\n  toggleCompleted = (event) => {\n    const { updateTasksCondition, task } = this.props;\n\n    const updateConditionCheckedTask = {\n      ...task,\n      completed: !task.completed,\n    };\n\n    updateTasksCondition(updateConditionCheckedTask);\n  };\n\n  toggleEditInput = (event) => {\n    event.preventDefault();\n    this.setState(prevState => ({\n      editIntVisible: !prevState.editIntVisible,\n      newValueTask: prevState.newValueTask.trim(),\n    }), () => this.textInput.current.focus());\n  };\n\n  sendNewTaskValue = () => {\n    const { updateTasksCondition, task } = this.props;\n    const updateConditionCheckedTask = {\n      ...task,\n      value: this.state.newValueTask.trim() || task.value.trim(),\n    };\n\n    this.setState(prevState => ({\n      newValueTask: prevState.newValueTask || this.props.task.value,\n    }));\n\n    updateTasksCondition(updateConditionCheckedTask);\n  };\n\n  handleBlur = (event) => {\n    if (this.state.editIntVisible) {\n      this.toggleEditInput(event);\n    }\n\n    this.sendNewTaskValue();\n  };\n\n  editTaskValue = (event) => {\n    this.setState({\n      newValueTask: event.target.value,\n    });\n  };\n\n  changeConditionEscapeKey = (event) => {\n    if (event.key === 'Escape') {\n      this.setState({\n        newValueTask: this.props.task.value,\n      });\n      this.toggleEditInput(event);\n    }\n  };\n\n  deleteTask = () => {\n    const { deleteTask, task } = this.props;\n    const updateConditionCheckedTask = {\n      ...task,\n      delete: true,\n    };\n\n    deleteTask(updateConditionCheckedTask);\n  };\n\n  render() {\n    const { task } = this.props;\n    const cx = classNames(\n      this.state.editIntVisible\n        ? 'editing'\n        : 'view',\n      task.completed\n        ? 'completed'\n        : '',\n    );\n\n    return (\n      <>\n        <li\n          className={classNames(cx)}\n          key={task.id}\n          onDoubleClick={this.toggleEditInput}\n        >\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              id={`todo-${task.id}`}\n              onChange={this.toggleCompleted}\n              checked={task.completed}\n            />\n            <label htmlFor={`todo-${task.id}`}>{task.value}</label>\n            <button\n              type=\"button\"\n              className=\"destroy\"\n              onClick={this.deleteTask}\n            />\n          </div>\n          <form action=\"\" onSubmit={this.toggleEditInput}>\n            <input\n              type=\"text\"\n              className=\"edit\"\n              value={this.state.newValueTask}\n              onChange={this.editTaskValue}\n              onKeyUp={this.changeConditionEscapeKey}\n              onBlur={this.handleBlur}\n              ref={this.textInput}\n            />\n          </form>\n        </li>\n      </>\n    );\n  }\n}\n\nTasksItem.propTypes = {\n  task: PropTypes.shape({\n    completed: PropTypes.bool,\n    id: PropTypes.string,\n    value: PropTypes.string,\n  }).isRequired,\n  updateTasksCondition: PropTypes.func.isRequired,\n  deleteTask: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TasksItem } from '../TasksItem/TasksItem';\n\nexport const TasksList = (props) => {\n  const {\n    initialTasksList,\n    showCurrentTasks,\n    updateTasksCondition,\n    deleteTask,\n  } = props;\n\n  let showNow = null;\n\n  if (showCurrentTasks === 'all') {\n    showNow = initialTasksList;\n  } else if (showCurrentTasks === 'completed') {\n    showNow = initialTasksList.filter(task => task.completed);\n  } else if (showCurrentTasks === 'active') {\n    showNow = initialTasksList.filter(task => !task.completed);\n  }\n\n  return (\n    <ul className=\"todo-list\">\n      {\n        showNow.map(task => (\n          task.value\n            ? (\n              <TasksItem\n                task={task}\n                key={task.id}\n                updateTasksCondition={updateTasksCondition}\n                deleteTask={deleteTask}\n                initialTasksList={initialTasksList}\n              />\n            )\n            : null\n        ))\n      }\n    </ul>\n  );\n};\n\nTasksList.propTypes = {\n  updateTasksCondition: PropTypes.func.isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  initialTasksList: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.string,\n    id: PropTypes.string,\n  })).isRequired,\n  showCurrentTasks: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport class Footer extends React.Component {\n  changeShowFlag = (event) => {\n    const { target } = event;\n    const { updateShowCurrentTaskFlag } = this.props;\n\n    updateShowCurrentTaskFlag(target.name);\n  };\n\n  clearCompleted = () => {\n    const { clearCompleted, initialTasksList } = this.props;\n    const newInitialTaskList = initialTasksList.filter(task => !task.completed);\n\n    clearCompleted(newInitialTaskList);\n  };\n\n  render() {\n    const { initialTasksList } = this.props;\n    const leftItems = initialTasksList.filter(task => !task.completed);\n\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {\n            leftItems.length > 1\n              ? `items left ${leftItems.length}`\n              : `item left ${leftItems.length}`\n          }\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              className=\"selected\"\n              onClick={this.changeShowFlag}\n              name=\"all\"\n            >\n              All\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/active\"\n              onClick={this.changeShowFlag}\n              name=\"active\"\n            >\n              Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/completed\"\n              onClick={this.changeShowFlag}\n              name=\"completed\"\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={this.clearCompleted}\n        >\n          Clear completed\n        </button>\n      </footer>\n    );\n  }\n}\n\nFooter.defaultProps = {\n  initialTasksList: [],\n};\n\nFooter.propTypes = {\n  initialTasksList: PropTypes.arrayOf(PropTypes.shape({\n    task: PropTypes.bool,\n  })),\n  updateShowCurrentTaskFlag: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { AddNewTaskField } from './components/AddBewTaskFiled/AddNewTaskField';\nimport { TasksList } from './components/TasksList/TasksList';\nimport { Footer } from './components/Footer/Footer';\n\nclass App extends React.Component {\n  state = {\n    initialTasksList: [],\n    showCurrentTasks: 'all',\n    toggleCompleted: false,\n  };\n\n  componentDidMount() {\n    this.setState({\n      initialTasksList:\n        JSON.parse(localStorage.getItem('myData')) || [],\n      toggleCompleted:\n        JSON.parse(localStorage.getItem('myToggleCompleted')) || false,\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    localStorage.setItem(\n      'myData',\n      JSON.stringify(this.state.initialTasksList),\n    );\n    localStorage.setItem(\n      'myToggleCompleted',\n      JSON.stringify(this.state.toggleCompleted),\n    );\n  }\n\n  updateInitialTasks = (newTasksItem) => {\n    this.setState(prevState => ({\n      initialTasksList: [\n        ...prevState.initialTasksList,\n        newTasksItem,\n      ],\n    }));\n  };\n\n  updateTasksCondition = (newTaskCondiniton) => {\n    this.setState(prevState => ({\n      initialTasksList: prevState.initialTasksList.map((taskObj) => {\n        if (taskObj.id === newTaskCondiniton.id) {\n          return newTaskCondiniton;\n        }\n\n        return taskObj;\n      }),\n    }));\n  };\n\n  updateShowCurrentTaskFlag = (newFlag) => {\n    this.setState({\n      showCurrentTasks: newFlag,\n    });\n  };\n\n  toggleCompletedAll = () => {\n    this.setState(prevState => ({\n      initialTasksList: prevState.initialTasksList.map(task => ({\n        ...task,\n        completed: !prevState.toggleCompleted,\n      })),\n      toggleCompleted: !prevState.toggleCompleted,\n    }));\n  };\n\n  clearCompleted = (clearTasksList) => {\n    this.setState({\n      initialTasksList: clearTasksList,\n    });\n  };\n\n  deleteTask = (deletedTask) => {\n    this.setState(prevState => ({\n      initialTasksList: prevState.initialTasksList\n        .filter(task => task.id !== deletedTask.id),\n    }));\n  };\n\n  render() {\n    // console.log(this.state.initialTasksList);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <AddNewTaskField\n            updateInitialTasks={this.updateInitialTasks}\n          />\n        </header>\n        {\n          this.state.initialTasksList.length\n            ? (\n              <>\n                <section className=\"main\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"toggle-all\"\n                    className=\"toggle-all\"\n                    onClick={this.toggleCompletedAll}\n                    defaultChecked={this.state.toggleCompleted}\n                  />\n                  <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n                  <TasksList\n                    initialTasksList={this.state.initialTasksList}\n                    showCurrentTasks={this.state.showCurrentTasks}\n                    updateTasksCondition={this.updateTasksCondition}\n                    deleteTask={this.deleteTask}\n                  />\n                </section>\n\n                <Footer\n                  initialTasksList={this.state.initialTasksList}\n                  showCurrentTasks={this.state.showCurrentTasks}\n                  updateShowCurrentTaskFlag={this.updateShowCurrentTaskFlag}\n                  clearCompleted={this.clearCompleted}\n                />\n              </>\n            )\n            : null\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './base.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}